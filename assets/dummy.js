eval("//# sourceURL=vendor/ember-cli/loader.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/core/style-bindings-meta.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit/core\');\n    test(\'ember-cli-qunit/core/style-bindings-meta.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/core/style-bindings-meta.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/core/style-bindings-meta.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/mixins/with-style.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit/mixins\');\n    test(\'ember-cli-qunit/mixins/with-style.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/mixins/with-style.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/mixins/with-style.jshint.js");

;eval("define(\"dummy/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix,\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, config.modulePrefix);\n\n    __exports__[\"default\"] = App;\n  });//# sourceURL=dummy/app.js");

;eval("define(\"dummy/controllers/test\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Controller.extend({\n      width:     10,\n      height:    20,\n      margin:    \'10px\',\n      marginTop: \'1\',\n      isShown:   true,\n      isLarge:   false\n    });\n  });//# sourceURL=dummy/controllers/test.js");

;eval("define(\"dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/core/style-bindings-meta.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-content-security-policy/core\');\n    test(\'ember-cli-content-security-policy/core/style-bindings-meta.js should pass jshint\', function() { \n      ok(true, \'ember-cli-content-security-policy/core/style-bindings-meta.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/core/style-bindings-meta.jshint.js");

;eval("define(\"dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/mixins/with-style.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-content-security-policy/mixins\');\n    test(\'ember-cli-content-security-policy/mixins/with-style.js should pass jshint\', function() { \n      ok(true, \'ember-cli-content-security-policy/mixins/with-style.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/mixins/with-style.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/core/style-bindings-meta.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data/core\');\n    test(\'ember-data/core/style-bindings-meta.js should pass jshint\', function() { \n      ok(true, \'ember-data/core/style-bindings-meta.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/core/style-bindings-meta.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/mixins/with-style.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data/mixins\');\n    test(\'ember-data/mixins/with-style.js should pass jshint\', function() { \n      ok(true, \'ember-data/mixins/with-style.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/mixins/with-style.jshint.js");

;eval("define(\"dummy/helpers/bind-style\", \n  [\"ember\",\"with-style-mixin/core/style-bindings-meta\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var StyleBindingsMeta = __dependency2__[\"default\"];\n\n    var addListener = Ember.addListener;\n    var run = Ember.run;\n    var once = run.once;\n    var SafeString = Ember.Handlebars.SafeString;\n\n    var uuid = 0;\n\n    var ATTRIBUTE_REPLACE_MAP = {\'&\': \'&amp;\', \'<\': \'&lt;\', \'>\': \'&gt;\', \'\"\': \'&quot;\', \"\'\": \'&#39;\'};\n\n\n    /**\n     * Escape an HTML attribute value\n     * TODO: replace with Ember helper if there is one and if it runs faster\n     *\n     * @method escapeAttribute\n     * @param {*} str\n     * @returns {String}\n     */\n    function escapeAttribute(str) {\n      if (str === null || str === undefined) {\n        str = \'\';\n      }\n      else {\n        str = \'\' + str;\n      }\n      return str.replace(/[&<>\'\"]/g, function (c) {\n        return ATTRIBUTE_REPLACE_MAP[c];\n      });\n    }\n\n    function bindStyle(/*binding1, binding2, ..., options*/) {\n      var bindings = [].slice.call(arguments);\n      var options = bindings.pop();\n      var view = options.data.view;\n      var bindingsMeta = new StyleBindingsMeta(this, bindings);\n      var id = ++uuid;\n      // listen for changes\n      bindingsMeta.addListener(function () {\n        var $el;\n        if (!view || view.isDestroying || view.isDestroyed || !($el = view.$(\'[data-bindstyle-\' + id + \'=\"\' + id + \'\"]\')).length) {\n          // we have been removed, destroy our meta\n          bindingsMeta.destroy();\n          bindingsMeta = null;\n        }\n        else {\n          $el.attr(\'style\', bindingsMeta.getStyle());\n        }\n      });\n      addListener(view, \'willClearRender\', bindingsMeta, \'destroy\');\n      addListener(view, \'willDestroyElement\', bindingsMeta, \'destroy\');\n      once(bindingsMeta, \'startObserving\');\n      return new SafeString(\n        \'style=\"\' + escapeAttribute(bindingsMeta.getStyle()) + \'\" data-bindstyle-\' + id + \'=\"\' + id + \'\"\'\n      );\n    }\n\n    __exports__.bindStyle = bindStyle;\n\n    __exports__[\"default\"] = bindStyle;\n  });//# sourceURL=dummy/helpers/bind-style.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/core/style-bindings-meta.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware/core\');\n    test(\'live-reload-middleware/core/style-bindings-meta.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/core/style-bindings-meta.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/core/style-bindings-meta.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/mixins/with-style.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware/mixins\');\n    test(\'live-reload-middleware/mixins/with-style.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/mixins/with-style.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/mixins/with-style.jshint.js");

;eval("define(\"dummy/router\", \n  [\"ember\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var Router = Ember.Router.extend({\n      location: config.locationType\n    });\n\n    Router.map(function () {\n      this.route(\'test\');\n    });\n\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=dummy/router.js");

;eval("define(\"dummy/routes/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Route.extend({\n      setupController: function (controller) {\n        controller.setProperties({\n          borderWidth: 2,\n          borderStyle: \'dashed\',\n          fontPercent: 100,\n          appPaddingTop: 20\n        });\n      }\n    });\n  });//# sourceURL=dummy/routes/application.js");

;eval("define(\"dummy/templates/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"<div class=\\\"social-networks-bar\\\">\\n  <iframe\\n      src=\\\"http://ghbtns.com/github-btn.html?user=huafu&repo=with-style-mixin&type=watch&count=true\\\"\\n      allowtransparency=\\\"true\\\" frameborder=\\\"0\\\" scrolling=\\\"0\\\" width=\\\"80\\\" height=\\\"20\\\"></iframe>\\n  <iframe\\n      src=\\\"//platform.twitter.com/widgets/follow_button.html?screen_name=huafu_g\\\"\\n      style=\\\"width: 240px; height: 20px;\\\"\\n      allowtransparency=\\\"true\\\"\\n      frameborder=\\\"0\\\"\\n      scrolling=\\\"no\\\">\\n  </iframe>\\n</div>\\n\\n<h1>with-style-mixin</h1>\\n\\n<section \");\n      data.buffer.push(escapeExpression((helper = helpers[\'bind-style\'] || (depth0 && depth0[\'bind-style\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0,depth0],types:[\"STRING\",\"STRING\",\"STRING\"],data:data},helper ? helper.call(depth0, \"border-width[px] border-style\", \"asInlineBlock:display?inline-block:\", \"fontPercent:font-size[%]\", options) : helperMissing.call(depth0, \"bind-style\", \"border-width[px] border-style\", \"asInlineBlock:display?inline-block:\", \"fontPercent:font-size[%]\", options))));\n      data.buffer.push(\">\\n  <pre>\\n    <code lang=\\\"handlebars\\\">\\n      &lt;section {{bind-style \'border-width[px] border-style\'\\n        \'asInlineBlock:display?inline-block:\' \'fontPercent:font-size[%]\'}}&gt;...&lt;/section&gt;\\n    </code>\\n  </pre>\\n  <div>\\n    <label>borderWidth = \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"borderWidth\")\n      },hashTypes:{\'value\': \"ID\"},hashContexts:{\'value\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</label>\\n    <label>borderStyle = \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"borderStyle\")\n      },hashTypes:{\'value\': \"ID\"},hashContexts:{\'value\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</label>\\n    <label>fontPercent = \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"fontPercent\")\n      },hashTypes:{\'value\': \"ID\"},hashContexts:{\'value\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</label>\\n    <label>asInlineBlock = \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'type\': (\"checkbox\"),\n        \'checked\': (\"asInlineBlock\")\n      },hashTypes:{\'type\': \"STRING\",\'checked\': \"ID\"},hashContexts:{\'type\': depth0,\'checked\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</label>\\n  </div>\\n</section>\\n\\n<section>\\n  <pre>\\n    <code lang=\\\"javascript\\\">\\nimport Ember from \'ember\';\\nimport WithStyleMixin from \'with-style-mixin/mixins/with-style\';\\n\\nexport default Ember.View.extend(WithStyleMixin, {\\n  styleBindings: [\\n    \'controller.appPaddingTop:padding-top[px]\',\\n    \'bgColor:background-color\'\\n  ],\\n\\n  bgColor: \'inherit\',\\n\\n  // ...\\n});\\n    </code>\\n  </pre>\\n  <label>appPaddingTop = \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"appPaddingTop\")\n      },hashTypes:{\'value\': \"ID\"},hashContexts:{\'value\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</label>\\n  <label>view.bgColor = \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"view.bgColor\")\n      },hashTypes:{\'value\': \"ID\"},hashContexts:{\'value\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</label>\\n</section>\\n\");\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/application.js");

;eval("define(\"dummy/templates/test\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"<h2 id=\\\"test1\\\" \");\n      data.buffer.push(escapeExpression((helper = helpers[\'bind-style\'] || (depth0 && depth0[\'bind-style\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0,depth0,depth0],types:[\"STRING\",\"STRING\",\"STRING\",\"STRING\"],data:data},helper ? helper.call(depth0, \"width[px]\", \"height[%]\", \"margin[pt]\", \"margin-top[em]\", options) : helperMissing.call(depth0, \"bind-style\", \"width[px]\", \"height[%]\", \"margin[pt]\", \"margin-top[em]\", options))));\n      data.buffer.push(\">\\n  Welcome to Ember.js\\n</h2>\\n\\n\\n<div class=\\\"inputs\\\">\\n  <label>width: \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"width\"),\n        \'id\': (\"width\")\n      },hashTypes:{\'value\': \"ID\",\'id\': \"STRING\"},hashContexts:{\'value\': depth0,\'id\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</label>\\n  <label>height: \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"height\"),\n        \'id\': (\"height\")\n      },hashTypes:{\'value\': \"ID\",\'id\': \"STRING\"},hashContexts:{\'value\': depth0,\'id\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</label>\\n  <label>margin: \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"margin\"),\n        \'id\': (\"margin\")\n      },hashTypes:{\'value\': \"ID\",\'id\': \"STRING\"},hashContexts:{\'value\': depth0,\'id\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</label>\\n  <label>margin-top: \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"marginTop\"),\n        \'id\': (\"marginTop\")\n      },hashTypes:{\'value\': \"ID\",\'id\': \"STRING\"},hashContexts:{\'value\': depth0,\'id\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</label>\\n  <hr/>\\n  <label>myDisplay: \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'type\': (\"checkbox\"),\n        \'checked\': (\"isShown\"),\n        \'id\': (\"isShown\")\n      },hashTypes:{\'type\': \"STRING\",\'checked\': \"ID\",\'id\': \"STRING\"},hashContexts:{\'type\': depth0,\'checked\': depth0,\'id\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</label>\\n  <label>isLarge: \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'type\': (\"checkbox\"),\n        \'checked\': (\"isLarge\"),\n        \'id\': (\"isLarge\")\n      },hashTypes:{\'type\': \"STRING\",\'checked\': \"ID\",\'id\': \"STRING\"},hashContexts:{\'type\': depth0,\'checked\': depth0,\'id\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</label>\\n</div>\\n\\n\\n<div id=\\\"test2\\\" \");\n      data.buffer.push(escapeExpression((helper = helpers[\'bind-style\'] || (depth0 && depth0[\'bind-style\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"isShown:display?:none isLarge:font-weight?bold:\", options) : helperMissing.call(depth0, \"bind-style\", \"isShown:display?:none isLarge:font-weight?bold:\", options))));\n      data.buffer.push(\">\\n  wooot\\n</div>\\n\\n\");\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/test.js");

;eval("define(\"dummy/tests/acceptance/application-test\", \n  [\"ember\",\"dummy/tests/helpers/start-app\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var startApp = __dependency2__[\"default\"];\n\n    var App;\n\n    function styleOf(selector) {\n      return Ember.$(selector).attr(\'style\');\n    }\n\n    module(\'Acceptance: Application\', {\n      setup:    function () {\n        App = startApp();\n      },\n      teardown: function () {\n        Ember.run(App, \'destroy\');\n      }\n    });\n\n    test(\'{{bind-style...}}\', function () {\n      visit(\'/test\');\n\n      andThen(function () {\n        strictEqual(styleOf(\'#test1\'), \'width: 10px; height: 20%; margin: 10px; margin-top: 1em;\');\n        strictEqual(styleOf(\'#test2\'), \'\');\n        click(\'#isShown\');\n      });\n      andThen(function () {\n        strictEqual(styleOf(\'#test2\'), \'display: none;\');\n        click(\'#isLarge\');\n      });\n      andThen(function () {\n        strictEqual(styleOf(\'#test2\'), \'display: none; font-weight: bold;\');\n        fillIn(\'#width\', 400);\n        fillIn(\'#height\', \'\');\n        fillIn(\'#margin\', -20);\n        fillIn(\'#marginTop\', \'3px\');\n      });\n      andThen(function() {\n        strictEqual(styleOf(\'#test1\'), \'width: 400px; margin: -20pt; margin-top: 3px;\');\n      });\n    });\n  });//# sourceURL=dummy/tests/acceptance/application-test.js");

;eval("define(\"dummy/tests/helpers/start-app\", \n  [\"ember\",\"dummy/app\",\"dummy/router\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Application = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({}, config.APP);\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n      Router.reopen({\n        location: \'none\'\n      });\n\n      Ember.run(function() {\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      App.reset(); // this shouldn\'t be needed, i want to be able to \"start an app at a specific URL\"\n\n      return App;\n    }\n  });//# sourceURL=dummy/tests/helpers/start-app.js");

;eval("define(\"dummy/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'app.js should pass jshint\', function() { \n      ok(true, \'app.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/app.jshint.js");

;eval("define(\"dummy/tests/controllers/test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/test.js should pass jshint\', function() { \n      ok(true, \'controllers/test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/controllers/test.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/acceptance/application-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/acceptance\');\n    test(\'dummy/tests/acceptance/application-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/acceptance/application-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/acceptance/application-test.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/helpers\');\n    test(\'dummy/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/helpers/resolver.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/helpers\');\n    test(\'dummy/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/helpers/start-app.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests\');\n    test(\'dummy/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/test-helper.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/mixins/with-style-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit/mixins\');\n    test(\'dummy/tests/unit/mixins/with-style-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/mixins/with-style-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/mixins/with-style-test.jshint.js");

;eval("define(\"dummy/tests/helpers/resolver\", \n  [\"ember/resolver\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix\n    };\n\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=dummy/tests/helpers/resolver.js");

;eval("define(\"dummy/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'router.js should pass jshint\', function() { \n      ok(true, \'router.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/router.jshint.js");

;eval("define(\"dummy/tests/routes/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/application.js should pass jshint\', function() { \n      ok(true, \'routes/application.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/routes/application.jshint.js");

;eval("define(\"dummy/tests/test-helper\", \n  [\"dummy/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n\n    QUnit.config.urlConfig.push({ id: \'nocontainer\', label: \'Hide container\'});\n    var containerVisibility = QUnit.urlParams.nocontainer ? \'hidden\' : \'visible\';\n    document.getElementById(\'ember-testing-container\').style.visibility = containerVisibility;\n  });//# sourceURL=dummy/tests/test-helper.js");

;eval("define(\"dummy/tests/unit/mixins/with-style-test\", \n  [\"ember\",\"with-style-mixin/mixins/with-style\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var WithStyleMixin = __dependency2__[\"default\"];\n\n    var WithStyleView;\n    var containerView, view;\n\n    function render(view) {\n      Ember.run(function () {\n        Ember.tryInvoke(containerView, \'destroy\');\n        containerView = Ember.ContainerView.create();\n        containerView.pushObject(view);\n        containerView.appendTo(\'#ember-testing\');\n      });\n    }\n\n    module(\'WithStyleMixin\', {\n      setup:    function () {\n        WithStyleView = Ember.View.extend(WithStyleMixin);\n      },\n      teardown: function () {\n        Ember.run(function () {\n          Ember.tryInvoke(containerView, \'destroy\');\n        });\n        containerView = null;\n        WithStyleView = null;\n      }\n    });\n\n    test(\'it renders bare properties ignoring undefined/null/\"\"\', function () {\n      var subject = WithStyleView.create({\n        styleBindings: [\'width\', \'margin\', \'display\', \'color\'],\n        width:         \'10px\',\n        display:       \'none\',\n        color:         \'\'\n      });\n      render(subject);\n      Ember.run(function () {\n        strictEqual(subject.$().attr(\'style\'), \'width: 10px; display: none;\');\n      });\n    });\n\n    test(\'it renders mapped properties ignoring undefined/null/\"\"\', function () {\n      var subject = WithStyleView.create({\n        styleBindings: [\'myWidth:width\', \'myMargin:margin\', \'myDisplay:display\', \'myColor:color\'],\n        myWidth:       \'10px\',\n        myDisplay:     \'none\',\n        myColor:       \'\'\n      });\n      render(subject);\n      Ember.run(function () {\n        strictEqual(subject.$().attr(\'style\'), \'width: 10px; display: none;\');\n      });\n    });\n\n    test(\'it renders properties with unit\', function () {\n      var subject = WithStyleView.create({\n        styleBindings: [\'width[px]\', \'margin[pt]\'],\n        width:         10,\n        margin:        5\n      });\n      render(subject);\n      Ember.run(function () {\n        strictEqual(subject.$().attr(\'style\'), \'width: 10px; margin: 5pt;\');\n      });\n    });\n\n    test(\'it renders properties with negative numbers and unit\', function () {\n      var subject = WithStyleView.create({\n        styleBindings: [\'width[px]\', \'margin[pt]\'],\n        width:         -10,\n        margin:        -5\n      });\n      render(subject);\n      Ember.run(function () {\n        strictEqual(subject.$().attr(\'style\'), \'width: -10px; margin: -5pt;\');\n      });\n    });\n\n    test(\'it ignores unit when the value is 0 or is not a number\', function () {\n      var subject = WithStyleView.create({\n        styleBindings: [\'width[px]\', \'margin[pt]\'],\n        width:         \'50%\',\n        margin:        0\n      });\n      render(subject);\n      Ember.run(function () {\n        strictEqual(subject.$().attr(\'style\'), \'width: 50%; margin: 0;\');\n      });\n    });\n\n    test(\'it renders properties with unit and mapping\', function () {\n      var subject = WithStyleView.create({\n        styleBindings: [\'myWidth:width[em]\', \'myMargin:margin[pt]\', \'myHeight:height[%]\'],\n        myWidth:       \'10px\',\n        myMargin:      0,\n        myHeight:      30\n      });\n      render(subject);\n      Ember.run(function () {\n        strictEqual(subject.$().attr(\'style\'), \'width: 10px; margin: 0; height: 30%;\');\n      });\n    });\n\n    test(\'it renders properties with ternary operator\', function () {\n      var subject = WithStyleView.create({\n        styleBindings: [\'display?:none\', \'visibility?visible:\', \'overflow?visible:hidden\'],\n        display:       true,\n        visibility:    true,\n        overflow:      true\n      });\n      render(subject);\n      Ember.run(function () {\n        strictEqual(subject.$().attr(\'style\'), \'visibility: visible; overflow: visible;\');\n        subject.setProperties({\n          display:    false,\n          visibility: false,\n          overflow:   false\n        });\n      });\n      Ember.run(function () {\n        strictEqual(subject.$().attr(\'style\'), \'display: none; overflow: hidden;\');\n      });\n    });\n\n    test(\'it renders properties with ternary operator and mapping\', function () {\n      var subject = WithStyleView.create({\n        styleBindings: [\'disp:display?:none\', \'vis:visibility?visible:\', \'over:overflow?visible:hidden\'],\n        disp:          true,\n        vis:           true,\n        over:          true\n      });\n      render(subject);\n      Ember.run(function () {\n        strictEqual(subject.$().attr(\'style\'), \'visibility: visible; overflow: visible;\');\n        subject.setProperties({\n          disp: false,\n          vis:  false,\n          over: false\n        });\n      });\n      Ember.run(function () {\n        strictEqual(subject.$().attr(\'style\'), \'display: none; overflow: hidden;\');\n      });\n    });\n\n    test(\'it renders properties with ternary operator and units\', function () {\n      var subject = WithStyleView.create({\n        styleBindings: [\'width[px]?:10\', \'height[%]?50:\', \'padding[em]?10:0\'],\n        width:         true,\n        height:        true,\n        padding:       true\n      });\n      render(subject);\n      Ember.run(function () {\n        strictEqual(subject.$().attr(\'style\'), \'height: 50%; padding: 10em;\');\n        subject.setProperties({\n          width:   false,\n          height:  false,\n          padding: false\n        });\n      });\n      Ember.run(function () {\n        strictEqual(subject.$().attr(\'style\'), \'width: 10px; padding: 0;\');\n      });\n    });\n\n    test(\'it renders properties with ternary operator, mapping and units\', function () {\n      var subject = WithStyleView.create({\n        styleBindings: [\'w:width[px]?:100\', \'h:height[%]?50:\', \'pad:padding[em]?10:0\'],\n        w:             true,\n        h:             true,\n        pad:           true\n      });\n      render(subject);\n      Ember.run(function () {\n        strictEqual(subject.$().attr(\'style\'), \'height: 50%; padding: 10em;\');\n        subject.setProperties({\n          w:   false,\n          h:   false,\n          pad: false\n        });\n      });\n      Ember.run(function () {\n        strictEqual(subject.$().attr(\'style\'), \'width: 100px; padding: 0;\');\n      });\n    });\n  });//# sourceURL=dummy/tests/unit/mixins/with-style-test.js");

;eval("define(\"dummy/tests/views/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - views\');\n    test(\'views/application.js should pass jshint\', function() { \n      ok(true, \'views/application.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/views/application.jshint.js");

;eval("define(\"dummy/views/application\", \n  [\"ember\",\"with-style-mixin/mixins/with-style\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    /* globals hljs */\n    var Ember = __dependency1__[\"default\"];\n    var WithStyleMixin = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = Ember.View.extend(WithStyleMixin, {\n      styleBindings: [\n        \'controller.appPaddingTop:padding-top[px]\',\n        \'bgColor:background-color\'\n      ],\n\n      bgColor: \'inherit\',\n\n      initHljs: function () {\n        if (typeof hljs === \'undefined\') {\n          return;\n        }\n        Ember.run.schedule(\'afterRender\', this, function () {\n          this.$(\'pre code\').each(function (i, block) {\n            hljs.highlightBlock(block);\n          });\n        });\n      }.on(\'didInsertElement\')\n    });\n  });//# sourceURL=dummy/views/application.js");

;eval("define(\"dummy/with-style-mixin/tests/with-style-mixin/core/style-bindings-meta.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - with-style-mixin/core\');\n    test(\'with-style-mixin/core/style-bindings-meta.js should pass jshint\', function() { \n      ok(true, \'with-style-mixin/core/style-bindings-meta.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/with-style-mixin/tests/with-style-mixin/core/style-bindings-meta.jshint.js");

;eval("define(\"dummy/with-style-mixin/tests/with-style-mixin/mixins/with-style.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - with-style-mixin/mixins\');\n    test(\'with-style-mixin/mixins/with-style.js should pass jshint\', function() { \n      ok(true, \'with-style-mixin/mixins/with-style.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/with-style-mixin/tests/with-style-mixin/mixins/with-style.jshint.js");

/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var metaName = 'dummy/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
});

if (runningTests) {
  require('dummy/tests/test-helper');
} else {
  require('dummy/app')['default'].create({"LOG_ACTIVE_GENERATION":true,"LOG_VIEW_LOOKUPS":true});
}

/* jshint ignore:end */
